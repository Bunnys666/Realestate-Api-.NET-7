
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Mvc;
using RealEstate.Api.Data;
using RealEstate.Api.Models;

namespace RealEstate.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CategoriesController : ControllerBase
    {
        // new instance of db context
        ApiDbContext _dbContext = new ApiDbContext();


        // GET: api/Categories
        [HttpGet]
        public IActionResult Get()
        {
            return Ok(_dbContext.Categories);
            //return _dbContext.Categories;
        }

        // GET: api/Categories/5
        [HttpGet("{id}")]
        public IActionResult Get(int id)
        {
            var category = _dbContext.Categories.FirstOrDefault(x => x.Id == id);

            if (category == null)
            {
                return NotFound("No record found");
            }
            else
            {
                return Ok(category);
            }
        }

        // end point should be like this => api/categories/SortCategories/
        [HttpGet("action")]
        public IActionResult SortCategories()
        {
            return Ok(_dbContext.Categories.OrderByDescending(x => x.Name));
        }


        // POST: api/Categories
        [HttpPost]
        public IActionResult Post([FromBody] Category category)
        {
            _dbContext.Add(category);
            _dbContext.SaveChanges();

            return StatusCode(201, category);
            //return Created(category, string.Empty);
        }

        // PUT: api/Categories/5
        [HttpPut("{id}")]
        public IActionResult Put(int id, [FromBody] Category category)
        {
            var response = _dbContext.Categories.Find(id);

            if (response == null)
            {
                return NotFound("No record found");
            }
            else
            {
                response.Name = category.Name;

                response.ImageUrl = category.ImageUrl;

                _dbContext.SaveChanges();

                return Ok("update successfully");
            }

        }

        // DELETE: api/Categories/5
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            var category = _dbContext.Categories.Find(id);

            if (category == null)
            {
                return NotFound("No record found");
            }
            else
            {
                _dbContext.Categories.Remove(category);

                _dbContext.SaveChanges();

                return Ok("Deleted Successfully");
            }
        }
    }
}
